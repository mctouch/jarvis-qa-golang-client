// Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: jarvis_nlp_core.proto

package jarvis_speech

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// NLPModelParams is a metadata message that is included in every request message
// used by the Core NLP Service and is used to specify model characteristics/requirements
type NLPModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested model to use. If unavailable, the request will return an error
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *NLPModelParams) Reset() {
	*x = NLPModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLPModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLPModelParams) ProtoMessage() {}

func (x *NLPModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLPModelParams.ProtoReflect.Descriptor instead.
func (*NLPModelParams) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{0}
}

func (x *NLPModelParams) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

// TextTransformRequest is a request type intended for services like TransformText
// which take an arbitrary text input
type TextTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	Text  []string        `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	TopN  uint32          `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"` //
	Model *NLPModelParams `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *TextTransformRequest) Reset() {
	*x = TextTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransformRequest) ProtoMessage() {}

func (x *TextTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransformRequest.ProtoReflect.Descriptor instead.
func (*TextTransformRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{1}
}

func (x *TextTransformRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextTransformRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *TextTransformRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

// TextTransformResponse is returned by the TransformText method. Responses
// are returned in the same order as they were requested.
type TextTransformResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
}

func (x *TextTransformResponse) Reset() {
	*x = TextTransformResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransformResponse) ProtoMessage() {}

func (x *TextTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransformResponse.ProtoReflect.Descriptor instead.
func (*TextTransformResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{2}
}

func (x *TextTransformResponse) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

// TextClassRequest is the input message to the ClassifyText service.
type TextClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// Return the top N classification results for each input. 0 or 1 will return top class, otherwise N.
	// Note: Current disabled.
	TopN  uint32          `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	Model *NLPModelParams `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *TextClassRequest) Reset() {
	*x = TextClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassRequest) ProtoMessage() {}

func (x *TextClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassRequest.ProtoReflect.Descriptor instead.
func (*TextClassRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{3}
}

func (x *TextClassRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextClassRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *TextClassRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

// Classification messages return a class name and corresponding score
type Classification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName string  `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Score     float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Classification) Reset() {
	*x = Classification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classification) ProtoMessage() {}

func (x *Classification) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classification.ProtoReflect.Descriptor instead.
func (*Classification) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{4}
}

func (x *Classification) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *Classification) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// ClassificationResults contain zero or more Classification messages
// If the number of Classifications is > 1, top_n > 1 must have been
// specified.
type ClassificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Classification `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *ClassificationResult) Reset() {
	*x = ClassificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationResult) ProtoMessage() {}

func (x *ClassificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationResult.ProtoReflect.Descriptor instead.
func (*ClassificationResult) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{5}
}

func (x *ClassificationResult) GetLabels() []*Classification {
	if x != nil {
		return x.Labels
	}
	return nil
}

// TextClassResponse is the return message from the ClassifyText service.
type TextClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ClassificationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TextClassResponse) Reset() {
	*x = TextClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassResponse) ProtoMessage() {}

func (x *TextClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassResponse.ProtoReflect.Descriptor instead.
func (*TextClassResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{6}
}

func (x *TextClassResponse) GetResults() []*ClassificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// TokenClassRequest is the input message to the ClassifyText service.
type TokenClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// Return the top N classification results for each input. 0 or 1 will return top class, otherwise N.
	// Note: Current disabled.
	TopN  uint32          `protobuf:"varint,3,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	Model *NLPModelParams `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *TokenClassRequest) Reset() {
	*x = TokenClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassRequest) ProtoMessage() {}

func (x *TokenClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassRequest.ProtoReflect.Descriptor instead.
func (*TokenClassRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{7}
}

func (x *TokenClassRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TokenClassRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *TokenClassRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

// TokenClassValue is used to correlate an input token with its classification results
type TokenClassValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Label []*Classification `protobuf:"bytes,2,rep,name=label,proto3" json:"label,omitempty"`
}

func (x *TokenClassValue) Reset() {
	*x = TokenClassValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenClassValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassValue) ProtoMessage() {}

func (x *TokenClassValue) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassValue.ProtoReflect.Descriptor instead.
func (*TokenClassValue) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{8}
}

func (x *TokenClassValue) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenClassValue) GetLabel() []*Classification {
	if x != nil {
		return x.Label
	}
	return nil
}

// TokenClassSequence is used for returning a sequence of TokenClassValue objects
// in the original order of input tokens
type TokenClassSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TokenClassValue `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TokenClassSequence) Reset() {
	*x = TokenClassSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenClassSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassSequence) ProtoMessage() {}

func (x *TokenClassSequence) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassSequence.ProtoReflect.Descriptor instead.
func (*TokenClassSequence) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{9}
}

func (x *TokenClassSequence) GetResults() []*TokenClassValue {
	if x != nil {
		return x.Results
	}
	return nil
}

// TokenClassResponse returns a single TokenClassSequence per input request
type TokenClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TokenClassSequence `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TokenClassResponse) Reset() {
	*x = TokenClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassResponse) ProtoMessage() {}

func (x *TokenClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassResponse.ProtoReflect.Descriptor instead.
func (*TokenClassResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_core_proto_rawDescGZIP(), []int{10}
}

func (x *TokenClassResponse) GetResults() []*TokenClassSequence {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_jarvis_nlp_core_proto protoreflect.FileDescriptor

var file_jarvis_nlp_core_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x5f, 0x6e, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x22, 0x2f, 0x0a, 0x0e, 0x4e, 0x4c,
	0x50, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x37, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x4e, 0x4c, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2b, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12,
	0x37, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x4e, 0x4c, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x51, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x11, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x37, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x4c, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x60, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x52, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0xb3,
	0x02, 0x0a, 0x0d, 0x4a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x65, 0x4e, 0x4c, 0x50,
	0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a, 0x18, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jarvis_nlp_core_proto_rawDescOnce sync.Once
	file_jarvis_nlp_core_proto_rawDescData = file_jarvis_nlp_core_proto_rawDesc
)

func file_jarvis_nlp_core_proto_rawDescGZIP() []byte {
	file_jarvis_nlp_core_proto_rawDescOnce.Do(func() {
		file_jarvis_nlp_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_jarvis_nlp_core_proto_rawDescData)
	})
	return file_jarvis_nlp_core_proto_rawDescData
}

var file_jarvis_nlp_core_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_jarvis_nlp_core_proto_goTypes = []interface{}{
	(*NLPModelParams)(nil),        // 0: nvidia.jarvis.nlp.NLPModelParams
	(*TextTransformRequest)(nil),  // 1: nvidia.jarvis.nlp.TextTransformRequest
	(*TextTransformResponse)(nil), // 2: nvidia.jarvis.nlp.TextTransformResponse
	(*TextClassRequest)(nil),      // 3: nvidia.jarvis.nlp.TextClassRequest
	(*Classification)(nil),        // 4: nvidia.jarvis.nlp.Classification
	(*ClassificationResult)(nil),  // 5: nvidia.jarvis.nlp.ClassificationResult
	(*TextClassResponse)(nil),     // 6: nvidia.jarvis.nlp.TextClassResponse
	(*TokenClassRequest)(nil),     // 7: nvidia.jarvis.nlp.TokenClassRequest
	(*TokenClassValue)(nil),       // 8: nvidia.jarvis.nlp.TokenClassValue
	(*TokenClassSequence)(nil),    // 9: nvidia.jarvis.nlp.TokenClassSequence
	(*TokenClassResponse)(nil),    // 10: nvidia.jarvis.nlp.TokenClassResponse
}
var file_jarvis_nlp_core_proto_depIdxs = []int32{
	0,  // 0: nvidia.jarvis.nlp.TextTransformRequest.model:type_name -> nvidia.jarvis.nlp.NLPModelParams
	0,  // 1: nvidia.jarvis.nlp.TextClassRequest.model:type_name -> nvidia.jarvis.nlp.NLPModelParams
	4,  // 2: nvidia.jarvis.nlp.ClassificationResult.labels:type_name -> nvidia.jarvis.nlp.Classification
	5,  // 3: nvidia.jarvis.nlp.TextClassResponse.results:type_name -> nvidia.jarvis.nlp.ClassificationResult
	0,  // 4: nvidia.jarvis.nlp.TokenClassRequest.model:type_name -> nvidia.jarvis.nlp.NLPModelParams
	4,  // 5: nvidia.jarvis.nlp.TokenClassValue.label:type_name -> nvidia.jarvis.nlp.Classification
	8,  // 6: nvidia.jarvis.nlp.TokenClassSequence.results:type_name -> nvidia.jarvis.nlp.TokenClassValue
	9,  // 7: nvidia.jarvis.nlp.TokenClassResponse.results:type_name -> nvidia.jarvis.nlp.TokenClassSequence
	3,  // 8: nvidia.jarvis.nlp.JarvisCoreNLP.ClassifyText:input_type -> nvidia.jarvis.nlp.TextClassRequest
	7,  // 9: nvidia.jarvis.nlp.JarvisCoreNLP.ClassifyTokens:input_type -> nvidia.jarvis.nlp.TokenClassRequest
	1,  // 10: nvidia.jarvis.nlp.JarvisCoreNLP.TransformText:input_type -> nvidia.jarvis.nlp.TextTransformRequest
	6,  // 11: nvidia.jarvis.nlp.JarvisCoreNLP.ClassifyText:output_type -> nvidia.jarvis.nlp.TextClassResponse
	10, // 12: nvidia.jarvis.nlp.JarvisCoreNLP.ClassifyTokens:output_type -> nvidia.jarvis.nlp.TokenClassResponse
	2,  // 13: nvidia.jarvis.nlp.JarvisCoreNLP.TransformText:output_type -> nvidia.jarvis.nlp.TextTransformResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_jarvis_nlp_core_proto_init() }
func file_jarvis_nlp_core_proto_init() {
	if File_jarvis_nlp_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jarvis_nlp_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLPModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTransformResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenClassValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenClassSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jarvis_nlp_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jarvis_nlp_core_proto_goTypes,
		DependencyIndexes: file_jarvis_nlp_core_proto_depIdxs,
		MessageInfos:      file_jarvis_nlp_core_proto_msgTypes,
	}.Build()
	File_jarvis_nlp_core_proto = out.File
	file_jarvis_nlp_core_proto_rawDesc = nil
	file_jarvis_nlp_core_proto_goTypes = nil
	file_jarvis_nlp_core_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jarvis_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JarvisCoreNLPClient is the client API for JarvisCoreNLP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisCoreNLPClient interface {
	// ClassifyText takes as input an input/query string and parameters related
	// to the requested model to use to evaluate the text. The service evaluates the
	// text with the requested model, and returns one or more classifications.
	ClassifyText(ctx context.Context, in *TextClassRequest, opts ...grpc.CallOption) (*TextClassResponse, error)
	// ClassifyTokens takes as input either a string or list of tokens and parameters
	// related to which model to use. The service evaluates the text with the requested
	// model, performing additional tokenization if necessary, and returns one or more
	// class labels per token.
	ClassifyTokens(ctx context.Context, in *TokenClassRequest, opts ...grpc.CallOption) (*TokenClassResponse, error)
	// TransformText takes an input/query string and parameters related to the
	// requested model and returns another string. The behavior of the function
	// is defined entirely by the underlying model and may be used for
	// tasks like translation, adding punctuation, augment the input directly, etc.
	TransformText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error)
}

type jarvisCoreNLPClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisCoreNLPClient(cc grpc.ClientConnInterface) JarvisCoreNLPClient {
	return &jarvisCoreNLPClient{cc}
}

func (c *jarvisCoreNLPClient) ClassifyText(ctx context.Context, in *TextClassRequest, opts ...grpc.CallOption) (*TextClassResponse, error) {
	out := new(TextClassResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreNLPClient) ClassifyTokens(ctx context.Context, in *TokenClassRequest, opts ...grpc.CallOption) (*TokenClassResponse, error) {
	out := new(TokenClassResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCoreNLPClient) TransformText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error) {
	out := new(TextTransformResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisCoreNLP/TransformText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisCoreNLPServer is the server API for JarvisCoreNLP service.
// All implementations must embed UnimplementedJarvisCoreNLPServer
// for forward compatibility
type JarvisCoreNLPServer interface {
	// ClassifyText takes as input an input/query string and parameters related
	// to the requested model to use to evaluate the text. The service evaluates the
	// text with the requested model, and returns one or more classifications.
	ClassifyText(context.Context, *TextClassRequest) (*TextClassResponse, error)
	// ClassifyTokens takes as input either a string or list of tokens and parameters
	// related to which model to use. The service evaluates the text with the requested
	// model, performing additional tokenization if necessary, and returns one or more
	// class labels per token.
	ClassifyTokens(context.Context, *TokenClassRequest) (*TokenClassResponse, error)
	// TransformText takes an input/query string and parameters related to the
	// requested model and returns another string. The behavior of the function
	// is defined entirely by the underlying model and may be used for
	// tasks like translation, adding punctuation, augment the input directly, etc.
	TransformText(context.Context, *TextTransformRequest) (*TextTransformResponse, error)
	mustEmbedUnimplementedJarvisCoreNLPServer()
}

// UnimplementedJarvisCoreNLPServer must be embedded to have forward compatible implementations.
type UnimplementedJarvisCoreNLPServer struct {
}

func (UnimplementedJarvisCoreNLPServer) ClassifyText(context.Context, *TextClassRequest) (*TextClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyText not implemented")
}
func (UnimplementedJarvisCoreNLPServer) ClassifyTokens(context.Context, *TokenClassRequest) (*TokenClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyTokens not implemented")
}
func (UnimplementedJarvisCoreNLPServer) TransformText(context.Context, *TextTransformRequest) (*TextTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformText not implemented")
}
func (UnimplementedJarvisCoreNLPServer) mustEmbedUnimplementedJarvisCoreNLPServer() {}

// UnsafeJarvisCoreNLPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisCoreNLPServer will
// result in compilation errors.
type UnsafeJarvisCoreNLPServer interface {
	mustEmbedUnimplementedJarvisCoreNLPServer()
}

func RegisterJarvisCoreNLPServer(s grpc.ServiceRegistrar, srv JarvisCoreNLPServer) {
	s.RegisterService(&JarvisCoreNLP_ServiceDesc, srv)
}

func _JarvisCoreNLP_ClassifyText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreNLPServer).ClassifyText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreNLPServer).ClassifyText(ctx, req.(*TextClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreNLP_ClassifyTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreNLPServer).ClassifyTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisCoreNLP/ClassifyTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreNLPServer).ClassifyTokens(ctx, req.(*TokenClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCoreNLP_TransformText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCoreNLPServer).TransformText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisCoreNLP/TransformText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCoreNLPServer).TransformText(ctx, req.(*TextTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JarvisCoreNLP_ServiceDesc is the grpc.ServiceDesc for JarvisCoreNLP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JarvisCoreNLP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.jarvis.nlp.JarvisCoreNLP",
	HandlerType: (*JarvisCoreNLPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyText",
			Handler:    _JarvisCoreNLP_ClassifyText_Handler,
		},
		{
			MethodName: "ClassifyTokens",
			Handler:    _JarvisCoreNLP_ClassifyTokens_Handler,
		},
		{
			MethodName: "TransformText",
			Handler:    _JarvisCoreNLP_TransformText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvis_nlp_core.proto",
}

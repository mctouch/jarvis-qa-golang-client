// Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: jarvis_nlp.proto

package jarvis_speech

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// AnalyzeIntentContext is reserved for future use when we may send context back in a
// a variety of different formats (including raw neural network hidden states)
type AnalyzeIntentContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeIntentContext) Reset() {
	*x = AnalyzeIntentContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeIntentContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentContext) ProtoMessage() {}

func (x *AnalyzeIntentContext) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentContext.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentContext) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{0}
}

// AnalyzeIntentOptions is an optional configuration message to be sent as part of
// an AnalyzeIntentRequest with query metadata
type AnalyzeIntentOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optionally provide context from previous interactions to bias the model's prediction
	//
	// Types that are assignable to Context:
	//	*AnalyzeIntentOptions_PreviousIntent
	//	*AnalyzeIntentOptions_Vectors
	Context isAnalyzeIntentOptions_Context `protobuf_oneof:"context"`
	// Optional domain field. Domain must be supported otherwise an error will be returned.
	// If left blank, a domain detector will be run first and then the query routed to the
	// appropriate intent classifier (if it exists)
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Optional language field. Assumed to be "en-US" if not specified.
	Lang string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *AnalyzeIntentOptions) Reset() {
	*x = AnalyzeIntentOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeIntentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentOptions) ProtoMessage() {}

func (x *AnalyzeIntentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentOptions.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentOptions) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{1}
}

func (m *AnalyzeIntentOptions) GetContext() isAnalyzeIntentOptions_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *AnalyzeIntentOptions) GetPreviousIntent() string {
	if x, ok := x.GetContext().(*AnalyzeIntentOptions_PreviousIntent); ok {
		return x.PreviousIntent
	}
	return ""
}

func (x *AnalyzeIntentOptions) GetVectors() *AnalyzeIntentContext {
	if x, ok := x.GetContext().(*AnalyzeIntentOptions_Vectors); ok {
		return x.Vectors
	}
	return nil
}

func (x *AnalyzeIntentOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AnalyzeIntentOptions) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type isAnalyzeIntentOptions_Context interface {
	isAnalyzeIntentOptions_Context()
}

type AnalyzeIntentOptions_PreviousIntent struct {
	PreviousIntent string `protobuf:"bytes,1,opt,name=previous_intent,json=previousIntent,proto3,oneof"`
}

type AnalyzeIntentOptions_Vectors struct {
	Vectors *AnalyzeIntentContext `protobuf:"bytes,2,opt,name=vectors,proto3,oneof"`
}

func (*AnalyzeIntentOptions_PreviousIntent) isAnalyzeIntentOptions_Context() {}

func (*AnalyzeIntentOptions_Vectors) isAnalyzeIntentOptions_Context() {}

// AnalyzeIntentRequest is the input message for the AnalyzeIntent service
type AnalyzeIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string to analyze for intent and slots
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional configuration for the request, including providing context from previous turns
	// and hardcoding a domain/language
	Options *AnalyzeIntentOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *AnalyzeIntentRequest) Reset() {
	*x = AnalyzeIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentRequest) ProtoMessage() {}

func (x *AnalyzeIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeIntentRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AnalyzeIntentRequest) GetOptions() *AnalyzeIntentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// AnalyzeIntentResponse is returned by the AnalyzeIntent service, and includes information
// related to the query's intent, (optionally) slot data, and its domain.
type AnalyzeIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Intent classification result, including the label and score
	Intent *Classification `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	// List of tokens explicitly marked as filling a slot relevant to the intent, where the
	// tokens may not exactly match the input (based on the recombined values after tokenization)
	Slots []*TokenClassValue `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	// Returns the inferred domain for the query if not hardcoded in the request. In the case where
	// the domain was hardcoded in AnalyzeIntentRequest, the returned domain is an exact match to the
	// request. In the case where no domain matches the query, intent and slots will be unset.
	//
	// DEPRECATED, use Classification domain field.
	DomainStr string `protobuf:"bytes,3,opt,name=domain_str,json=domainStr,proto3" json:"domain_str,omitempty"`
	// Returns the inferred domain for the query if not hardcoded in the request. In the case where
	// the domain was hardcoded in AnalyzeIntentRequest, the returned domain is an exact match to the
	// request. In the case where no domain matches the query, intent and slots will be unset.
	Domain *Classification `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *AnalyzeIntentResponse) Reset() {
	*x = AnalyzeIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentResponse) ProtoMessage() {}

func (x *AnalyzeIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyzeIntentResponse) GetIntent() *Classification {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *AnalyzeIntentResponse) GetSlots() []*TokenClassValue {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *AnalyzeIntentResponse) GetDomainStr() string {
	if x != nil {
		return x.DomainStr
	}
	return ""
}

func (x *AnalyzeIntentResponse) GetDomain() *Classification {
	if x != nil {
		return x.Domain
	}
	return nil
}

// AnalyzeEntitiesOptions is an optional configuration message to be sent as part of
// an AnalyzeEntitiesRequest with query metadata
type AnalyzeEntitiesOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional language field. Assumed to be "en-US" if not specified.
	Lang string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *AnalyzeEntitiesOptions) Reset() {
	*x = AnalyzeEntitiesOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeEntitiesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeEntitiesOptions) ProtoMessage() {}

func (x *AnalyzeEntitiesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeEntitiesOptions.ProtoReflect.Descriptor instead.
func (*AnalyzeEntitiesOptions) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyzeEntitiesOptions) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// AnalyzeEntitiesRequest is the input message for the AnalyzeEntities service
type AnalyzeEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string to analyze for intent and slots
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional configuration for the request, including providing context from previous turns
	// and hardcoding a domain/language
	Options *AnalyzeEntitiesOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *AnalyzeEntitiesRequest) Reset() {
	*x = AnalyzeEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeEntitiesRequest) ProtoMessage() {}

func (x *AnalyzeEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeEntitiesRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{5}
}

func (x *AnalyzeEntitiesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AnalyzeEntitiesRequest) GetOptions() *AnalyzeEntitiesOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type NaturalQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The natural language query
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Maximum number of answers to return for the query. Defaults to 1 if not set.
	TopN uint32 `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// Context to search with the above query
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *NaturalQueryRequest) Reset() {
	*x = NaturalQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryRequest) ProtoMessage() {}

func (x *NaturalQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryRequest.ProtoReflect.Descriptor instead.
func (*NaturalQueryRequest) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{6}
}

func (x *NaturalQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *NaturalQueryRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *NaturalQueryRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type NaturalQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text which answers the query
	Answer string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	// Score representing confidence in result
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *NaturalQueryResult) Reset() {
	*x = NaturalQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryResult) ProtoMessage() {}

func (x *NaturalQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryResult.ProtoReflect.Descriptor instead.
func (*NaturalQueryResult) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{7}
}

func (x *NaturalQueryResult) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *NaturalQueryResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type NaturalQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*NaturalQueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *NaturalQueryResponse) Reset() {
	*x = NaturalQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jarvis_nlp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaturalQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryResponse) ProtoMessage() {}

func (x *NaturalQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jarvis_nlp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryResponse.ProtoReflect.Descriptor instead.
func (*NaturalQueryResponse) Descriptor() ([]byte, []int) {
	return file_jarvis_nlp_proto_rawDescGZIP(), []int{8}
}

func (x *NaturalQueryResponse) GetResults() []*NaturalQueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_jarvis_nlp_proto protoreflect.FileDescriptor

var file_jarvis_nlp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x5f, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x1a, 0x15, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x5f, 0x6e, 0x6c,
	0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x6f, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x2c,
	0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x73, 0x0a, 0x16,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x5a, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a,
	0x12, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x57, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0xa1, 0x03, 0x0a, 0x09, 0x4a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x4e, 0x4c, 0x50, 0x12, 0x65, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x50, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x4e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d,
	0x5a, 0x18, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jarvis_nlp_proto_rawDescOnce sync.Once
	file_jarvis_nlp_proto_rawDescData = file_jarvis_nlp_proto_rawDesc
)

func file_jarvis_nlp_proto_rawDescGZIP() []byte {
	file_jarvis_nlp_proto_rawDescOnce.Do(func() {
		file_jarvis_nlp_proto_rawDescData = protoimpl.X.CompressGZIP(file_jarvis_nlp_proto_rawDescData)
	})
	return file_jarvis_nlp_proto_rawDescData
}

var file_jarvis_nlp_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_jarvis_nlp_proto_goTypes = []interface{}{
	(*AnalyzeIntentContext)(nil),   // 0: nvidia.jarvis.nlp.AnalyzeIntentContext
	(*AnalyzeIntentOptions)(nil),   // 1: nvidia.jarvis.nlp.AnalyzeIntentOptions
	(*AnalyzeIntentRequest)(nil),   // 2: nvidia.jarvis.nlp.AnalyzeIntentRequest
	(*AnalyzeIntentResponse)(nil),  // 3: nvidia.jarvis.nlp.AnalyzeIntentResponse
	(*AnalyzeEntitiesOptions)(nil), // 4: nvidia.jarvis.nlp.AnalyzeEntitiesOptions
	(*AnalyzeEntitiesRequest)(nil), // 5: nvidia.jarvis.nlp.AnalyzeEntitiesRequest
	(*NaturalQueryRequest)(nil),    // 6: nvidia.jarvis.nlp.NaturalQueryRequest
	(*NaturalQueryResult)(nil),     // 7: nvidia.jarvis.nlp.NaturalQueryResult
	(*NaturalQueryResponse)(nil),   // 8: nvidia.jarvis.nlp.NaturalQueryResponse
	(*Classification)(nil),         // 9: nvidia.jarvis.nlp.Classification
	(*TokenClassValue)(nil),        // 10: nvidia.jarvis.nlp.TokenClassValue
	(*TextTransformRequest)(nil),   // 11: nvidia.jarvis.nlp.TextTransformRequest
	(*TokenClassResponse)(nil),     // 12: nvidia.jarvis.nlp.TokenClassResponse
	(*TextTransformResponse)(nil),  // 13: nvidia.jarvis.nlp.TextTransformResponse
}
var file_jarvis_nlp_proto_depIdxs = []int32{
	0,  // 0: nvidia.jarvis.nlp.AnalyzeIntentOptions.vectors:type_name -> nvidia.jarvis.nlp.AnalyzeIntentContext
	1,  // 1: nvidia.jarvis.nlp.AnalyzeIntentRequest.options:type_name -> nvidia.jarvis.nlp.AnalyzeIntentOptions
	9,  // 2: nvidia.jarvis.nlp.AnalyzeIntentResponse.intent:type_name -> nvidia.jarvis.nlp.Classification
	10, // 3: nvidia.jarvis.nlp.AnalyzeIntentResponse.slots:type_name -> nvidia.jarvis.nlp.TokenClassValue
	9,  // 4: nvidia.jarvis.nlp.AnalyzeIntentResponse.domain:type_name -> nvidia.jarvis.nlp.Classification
	4,  // 5: nvidia.jarvis.nlp.AnalyzeEntitiesRequest.options:type_name -> nvidia.jarvis.nlp.AnalyzeEntitiesOptions
	7,  // 6: nvidia.jarvis.nlp.NaturalQueryResponse.results:type_name -> nvidia.jarvis.nlp.NaturalQueryResult
	5,  // 7: nvidia.jarvis.nlp.JarvisNLP.AnalyzeEntities:input_type -> nvidia.jarvis.nlp.AnalyzeEntitiesRequest
	2,  // 8: nvidia.jarvis.nlp.JarvisNLP.AnalyzeIntent:input_type -> nvidia.jarvis.nlp.AnalyzeIntentRequest
	11, // 9: nvidia.jarvis.nlp.JarvisNLP.PunctuateText:input_type -> nvidia.jarvis.nlp.TextTransformRequest
	6,  // 10: nvidia.jarvis.nlp.JarvisNLP.NaturalQuery:input_type -> nvidia.jarvis.nlp.NaturalQueryRequest
	12, // 11: nvidia.jarvis.nlp.JarvisNLP.AnalyzeEntities:output_type -> nvidia.jarvis.nlp.TokenClassResponse
	3,  // 12: nvidia.jarvis.nlp.JarvisNLP.AnalyzeIntent:output_type -> nvidia.jarvis.nlp.AnalyzeIntentResponse
	13, // 13: nvidia.jarvis.nlp.JarvisNLP.PunctuateText:output_type -> nvidia.jarvis.nlp.TextTransformResponse
	8,  // 14: nvidia.jarvis.nlp.JarvisNLP.NaturalQuery:output_type -> nvidia.jarvis.nlp.NaturalQueryResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_jarvis_nlp_proto_init() }
func file_jarvis_nlp_proto_init() {
	if File_jarvis_nlp_proto != nil {
		return
	}
	file_jarvis_nlp_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jarvis_nlp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeIntentContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeIntentOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeEntitiesOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jarvis_nlp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaturalQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jarvis_nlp_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AnalyzeIntentOptions_PreviousIntent)(nil),
		(*AnalyzeIntentOptions_Vectors)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jarvis_nlp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jarvis_nlp_proto_goTypes,
		DependencyIndexes: file_jarvis_nlp_proto_depIdxs,
		MessageInfos:      file_jarvis_nlp_proto_msgTypes,
	}.Build()
	File_jarvis_nlp_proto = out.File
	file_jarvis_nlp_proto_rawDesc = nil
	file_jarvis_nlp_proto_goTypes = nil
	file_jarvis_nlp_proto_depIdxs = nil
}

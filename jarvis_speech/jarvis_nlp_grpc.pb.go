// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jarvis_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JarvisNLPClient is the client API for JarvisNLP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JarvisNLPClient interface {
	// AnalyzeEntities accepts an input string and returns all named entities within
	// the text, as well as a category and likelihood.
	AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*TokenClassResponse, error)
	// AnalyzeIntent accepts an input string and returns the most likely
	// intent as well as slots relevant to that intent.
	//
	// The model requires that a valid "domain" be passed in, and optionally
	// supports including a previous intent classification result to provide
	// context for the model.
	AnalyzeIntent(ctx context.Context, in *AnalyzeIntentRequest, opts ...grpc.CallOption) (*AnalyzeIntentResponse, error)
	// PunctuateText takes text with no- or limited- punctuation and returns
	// the same text with corrected punctuation and capitalization.
	PunctuateText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error)
	// NaturalQuery is a search function that enables querying one or more documents
	// or contexts with a query that is written in natural language.
	NaturalQuery(ctx context.Context, in *NaturalQueryRequest, opts ...grpc.CallOption) (*NaturalQueryResponse, error)
}

type jarvisNLPClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisNLPClient(cc grpc.ClientConnInterface) JarvisNLPClient {
	return &jarvisNLPClient{cc}
}

func (c *jarvisNLPClient) AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*TokenClassResponse, error) {
	out := new(TokenClassResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisNLP/AnalyzeEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisNLPClient) AnalyzeIntent(ctx context.Context, in *AnalyzeIntentRequest, opts ...grpc.CallOption) (*AnalyzeIntentResponse, error) {
	out := new(AnalyzeIntentResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisNLP/AnalyzeIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisNLPClient) PunctuateText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error) {
	out := new(TextTransformResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisNLP/PunctuateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisNLPClient) NaturalQuery(ctx context.Context, in *NaturalQueryRequest, opts ...grpc.CallOption) (*NaturalQueryResponse, error) {
	out := new(NaturalQueryResponse)
	err := c.cc.Invoke(ctx, "/nvidia.jarvis.nlp.JarvisNLP/NaturalQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JarvisNLPServer is the server API for JarvisNLP service.
// All implementations must embed UnimplementedJarvisNLPServer
// for forward compatibility
type JarvisNLPServer interface {
	// AnalyzeEntities accepts an input string and returns all named entities within
	// the text, as well as a category and likelihood.
	AnalyzeEntities(context.Context, *AnalyzeEntitiesRequest) (*TokenClassResponse, error)
	// AnalyzeIntent accepts an input string and returns the most likely
	// intent as well as slots relevant to that intent.
	//
	// The model requires that a valid "domain" be passed in, and optionally
	// supports including a previous intent classification result to provide
	// context for the model.
	AnalyzeIntent(context.Context, *AnalyzeIntentRequest) (*AnalyzeIntentResponse, error)
	// PunctuateText takes text with no- or limited- punctuation and returns
	// the same text with corrected punctuation and capitalization.
	PunctuateText(context.Context, *TextTransformRequest) (*TextTransformResponse, error)
	// NaturalQuery is a search function that enables querying one or more documents
	// or contexts with a query that is written in natural language.
	NaturalQuery(context.Context, *NaturalQueryRequest) (*NaturalQueryResponse, error)
	mustEmbedUnimplementedJarvisNLPServer()
}

// UnimplementedJarvisNLPServer must be embedded to have forward compatible implementations.
type UnimplementedJarvisNLPServer struct {
}

func (UnimplementedJarvisNLPServer) AnalyzeEntities(context.Context, *AnalyzeEntitiesRequest) (*TokenClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeEntities not implemented")
}
func (UnimplementedJarvisNLPServer) AnalyzeIntent(context.Context, *AnalyzeIntentRequest) (*AnalyzeIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeIntent not implemented")
}
func (UnimplementedJarvisNLPServer) PunctuateText(context.Context, *TextTransformRequest) (*TextTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PunctuateText not implemented")
}
func (UnimplementedJarvisNLPServer) NaturalQuery(context.Context, *NaturalQueryRequest) (*NaturalQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NaturalQuery not implemented")
}
func (UnimplementedJarvisNLPServer) mustEmbedUnimplementedJarvisNLPServer() {}

// UnsafeJarvisNLPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JarvisNLPServer will
// result in compilation errors.
type UnsafeJarvisNLPServer interface {
	mustEmbedUnimplementedJarvisNLPServer()
}

func RegisterJarvisNLPServer(s grpc.ServiceRegistrar, srv JarvisNLPServer) {
	s.RegisterService(&JarvisNLP_ServiceDesc, srv)
}

func _JarvisNLP_AnalyzeEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisNLPServer).AnalyzeEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisNLP/AnalyzeEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisNLPServer).AnalyzeEntities(ctx, req.(*AnalyzeEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisNLP_AnalyzeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisNLPServer).AnalyzeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisNLP/AnalyzeIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisNLPServer).AnalyzeIntent(ctx, req.(*AnalyzeIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisNLP_PunctuateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisNLPServer).PunctuateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisNLP/PunctuateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisNLPServer).PunctuateText(ctx, req.(*TextTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisNLP_NaturalQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaturalQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisNLPServer).NaturalQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nvidia.jarvis.nlp.JarvisNLP/NaturalQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisNLPServer).NaturalQuery(ctx, req.(*NaturalQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JarvisNLP_ServiceDesc is the grpc.ServiceDesc for JarvisNLP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JarvisNLP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.jarvis.nlp.JarvisNLP",
	HandlerType: (*JarvisNLPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeEntities",
			Handler:    _JarvisNLP_AnalyzeEntities_Handler,
		},
		{
			MethodName: "AnalyzeIntent",
			Handler:    _JarvisNLP_AnalyzeIntent_Handler,
		},
		{
			MethodName: "PunctuateText",
			Handler:    _JarvisNLP_PunctuateText_Handler,
		},
		{
			MethodName: "NaturalQuery",
			Handler:    _JarvisNLP_NaturalQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jarvis_nlp.proto",
}
